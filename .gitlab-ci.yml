image: rustlang/rust:nightly

variables:
    DOCKER_DRIVER: overlay2
    CARGO_HOME: "$CI_PROJECT_DIR/cargo"
    CROSS_BUILD_IMAGE: "${CI_REGISTRY_IMAGE}/hack/cross:latest"
    TESTER_BUILD_IMAGE: "${CI_REGISTRY_IMAGE}/hack/tester:latest"

stages:
    - prepare
    - preconditions
    - build
    - test docker
    - package

.build and push hack image: &build-and-push-hack-image
    stage: prepare
    image: docker:latest
    services:
        - docker:dind
    script:
        # I hate this eval as much as the next guy, but I didn't come up with
        # another way that wouldn't result in duplication for the
        # `*_BUILD_IMAGE` variables.
        - export BUILD_IMAGE=$(eval "echo \"$BUILD_IMAGE\"")
        - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
        - 'docker pull "${BUILD_IMAGE}" || :'
        - >
          docker build
          --pull
          --cache-from "${BUILD_IMAGE}"
          -t "${BUILD_IMAGE}"
          "hack/docker/${BUILD_DIR}/"
        - docker push "${BUILD_IMAGE}"

build and push cross image:
    <<: *build-and-push-hack-image
    variables:
        BUILD_IMAGE: "$CROSS_BUILD_IMAGE"
        BUILD_DIR: "cross"

build and push tester image:
    <<: *build-and-push-hack-image
    variables:
        BUILD_IMAGE: "$TESTER_BUILD_IMAGE"
        BUILD_DIR: "tester"

rustfmt:
    stage: preconditions
    image: rustlang/rust:nightly
    script:
        - rustup component add rustfmt-preview
        - cargo fmt --all -- --check

build and test dynamic binary on stable:
    stage: build
    image: rust:latest
    script:
        - cargo build --verbose
        - cargo test -- --nocapture
    artifacts:
        name: "$CI_JOB_NAME"
        paths:
            - Cargo.toml
            - Cargo.lock

build dynamic binary on nightly:
    stage: build
    image: rustlang/rust:nightly
    script:
        - cargo build --verbose
    allow_failure: true
    artifacts:
        name: "$CI_JOB_NAME"
        paths:
            - Cargo.toml
            - Cargo.lock

build static binary:
    stage: build
    image: "${CROSS_BUILD_IMAGE}"
    script:
        - cargo build --target x86_64-unknown-linux-musl --release
        - cargo test --target x86_64-unknown-linux-musl -- --nocapture
        - cp target/x86_64-unknown-linux-musl/release/dfw dfw-unstripped
        - cp target/x86_64-unknown-linux-musl/release/dfw dfw
        - strip dfw
    artifacts:
        name: "$CI_JOB_NAME"
        paths:
            - Cargo.toml
            - Cargo.lock
            - dfw-unstripped
            - dfw

build for docker tests:
    stage: build
    image: rust:latest
    script:
        - cargo build --verbose
        - cargo build --verbose --tests
    cache:
        key: "docker-tests"
        paths:
        - target/
        - cargo/
        policy: push

.test-docker-tests: &test-docker-tests
    stage: test docker
    image: "$TESTER_BUILD_IMAGE"
    services:
        - "docker:dind"
    only:
        - master
        - develop
    dependencies: [] # don't download artifacts from previous jobs
    cache:
        key: "docker-tests"
        paths:
        - target/
        - cargo/
        policy: pull
    script:
        # Shiplift apparently doesn't work with a tcp docker host
        - export DOCKER_HOST="${DOCKER_HOST/tcp:/http:}"
        - RUST_TEST_THREADS=1 cargo test --all-features -j1 -- --nocapture

# API from 1.12.6 and below is not compatible.
test on docker 1.13.1:
    <<: *test-docker-tests
    services:
        - "docker:1.13.1-dind"
test on docker 17.03.3-ce:
    <<: *test-docker-tests
    services:
        - "docker:17.03.3-ce-dind"
test on docker 17.06.2-ce:
    <<: *test-docker-tests
    services:
        - "docker:17.06.2-ce-dind"
test on docker 17.07.0-ce:
    <<: *test-docker-tests
    services:
        - "docker:17.07.0-ce-dind"
test on docker 17.09.1-ce:
    <<: *test-docker-tests
    services:
        - "docker:17.09.1-ce-dind"
test on docker 17.12.1-ce:
    <<: *test-docker-tests
    services:
        - "docker:17.12.1-ce-dind"
test on docker 18.03.1-ce:
    <<: *test-docker-tests
    services:
        - "docker:18.03.1-ce-dind"
test on docker 18.06.1-ce:
    <<: *test-docker-tests
    services:
        - "docker:18.06.1-ce-dind"
    only:
        - /.*/

package and push image for feature-branch:
    stage: package
    image: docker:latest
    services:
        - docker:dind
    only:
        - branches
    except:
        - master
        - develop
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build --pull -t "${CI_REGISTRY_IMAGE}/branches:${CI_COMMIT_REF_SLUG}" .
        - docker push "${CI_REGISTRY_IMAGE}/branches:${CI_COMMIT_REF_SLUG}"

package and push image for tags:
    stage: package
    image: docker:latest
    services:
        - docker:dind
    only:
        - tags
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build --pull -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}" .
        - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"

package and push image on develop:
    stage: package
    image: docker:latest
    services:
        - docker:dind
    only:
        - develop
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build --pull -t "${CI_REGISTRY_IMAGE}/develop:latest" .
        - docker push "${CI_REGISTRY_IMAGE}/develop:latest"

package and push image on master:
    stage: package
    image: docker:latest
    services:
        - docker:dind
    only:
        - master
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build --pull -t $CI_REGISTRY_IMAGE .
        - docker push $CI_REGISTRY_IMAGE

# -----------------------------------------------------------------------------

.global_functions: &global_functions |
    if command -v docker; then
        if ! docker info &>/dev/null; then
            if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
                export DOCKER_HOST='tcp://localhost:2375'
            fi
        fi
    fi

before_script:
    - *global_functions
