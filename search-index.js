var N = null;var searchIndex = {};
searchIndex["dfw"]={"doc":"DFW - Docker Firewall Framework in Rust","items":[[0,"errors","dfw","Errors, using [`failure`][failure].",N,N],[4,"DFWError","dfw::errors","",N,N],[13,"TraitMethodUnimplemented","","",0,N],[12,"method","dfw::errors::DFWError","",0,N],[6,"Result","dfw::errors","",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[0,"iptables","dfw","This module holds the `IPTables` compatibility trait, allowing the use of multiple implementations for the `IPTables` type of the [`rust-iptables`][rust-iptables] crate.",N,N],[3,"IPTablesRestore","dfw::iptables","`IPTables` implementation which tracks the functions called and maps it to the text-format used by `iptables-restore`. Upon calling `IPTables::commit` this text is then passed onto the `iptables-restore`. This will have the following effect:",N,N],[3,"IPTablesDummy","","`IPTables` implementation which does not interact with the iptables binary and does not modify the rules active on the host.",N,N],[3,"IPTablesLogger","","`IPTables` implementation which does not interact with the iptables binary and does not modify the rules active on the host. It does keep a log of every action executed.",N,N],[4,"IPVersion","","Enum identifying a IP protocol version. Can be used by `IPTables` implementations to discern between IPv4 rules and IPv6 rules.",N,N],[13,"IPv4","","IP protocol version 4",1,N],[13,"IPv6","","IP protocol version 6",1,N],[8,"IPTables","","Compatibility trait to generalize the API used by [`rust-iptables`][rust-iptables].",N,N],[10,"get_policy","","Get the default policy for a table/chain.",2,[[["self"],["str"],["str"]],["result",["string"]]]],[10,"set_policy","","Set the default policy for a table/chain.",2,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[10,"execute","","Executes a given `command` on the chain. Returns the command output if successful.",2,[[["self"],["str"],["str"]],["result",["output"]]]],[10,"exists","","Checks for the existence of the `rule` in the table/chain. Returns true if the rule exists.",2,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[10,"chain_exists","","Checks for the existence of the `chain` in the table. Returns true if the chain exists.",2,[[["self"],["str"],["str"]],["result",["bool"]]]],[10,"insert","","Inserts `rule` in the `position` to the table/chain. Returns `true` if the rule is inserted.",2,[[["self"],["str"],["str"],["str"],["i32"]],["result",["bool"]]]],[10,"insert_unique","","Inserts `rule` in the `position` to the table/chain if it does not exist. Returns `true` if the rule is inserted.",2,[[["self"],["str"],["str"],["str"],["i32"]],["result",["bool"]]]],[10,"replace","","Replaces `rule` in the `position` to the table/chain. Returns `true` if the rule is replaced.",2,[[["self"],["str"],["str"],["str"],["i32"]],["result",["bool"]]]],[10,"append","","Appends `rule` to the table/chain. Returns `true` if the rule is appended.",2,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[10,"append_unique","","Appends `rule` to the table/chain if it does not exist. Returns `true` if the rule is appended.",2,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[10,"append_replace","","Appends or replaces `rule` to the table/chain if it does not exist. Returns `true` if the rule is appended or replaced.",2,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[10,"delete","","Deletes `rule` from the table/chain. Returns `true` if the rule is deleted.",2,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[10,"delete_all","","Deletes all repetition of the `rule` from the table/chain. Returns `true` if the rules are deleted.",2,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[10,"list","","Lists rules in the table/chain.",2,[[["self"],["str"],["str"]],["result",["vec"]]]],[10,"list_table","","Lists rules in the table.",2,[[["self"],["str"]],["result",["vec"]]]],[10,"list_chains","","Lists the name of each chain in the table.",2,[[["self"],["str"]],["result",["vec"]]]],[10,"new_chain","","Creates a new user-defined chain. Returns `true` if the chain is created.",2,[[["self"],["str"],["str"]],["result",["bool"]]]],[10,"flush_chain","","Flushes (deletes all rules) a chain. Returns `true` if the chain is flushed.",2,[[["self"],["str"],["str"]],["result",["bool"]]]],[10,"rename_chain","","Renames a chain in the table. Returns `true` if the chain is renamed.",2,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[10,"delete_chain","","Deletes a user-defined chain in the table. Returns `true` if the chain is deleted.",2,[[["self"],["str"],["str"]],["result",["bool"]]]],[10,"flush_table","","Flushes all chains in a table. Returns `true` if the chains are flushed.",2,[[["self"],["str"]],["result",["bool"]]]],[10,"commit","","Commit the changes queued. Only has an effect on some implementations",2,[[["self"]],["result",["bool"]]]],[11,"clone","","",1,[[["self"]],["ipversion"]]],[11,"new","","Create a new instance of `IPTablesRestore`",3,[[["ipversion"]],["result",["iptablesrestore"]]]],[11,"get_rules","","Retrieve the current text that would be passed to `iptables-restore` as a vector of lines.",3,[[["self"]],["vec",["string"]]]],[11,"append","","",3,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"delete","","",3,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"flush_chain","","",3,[[["self"],["str"],["str"]],["result",["bool"]]]],[11,"flush_table","","",3,[[["self"],["str"]],["result",["bool"]]]],[11,"set_policy","","",3,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"execute","","",3,[[["self"],["str"],["str"]],["result",["output"]]]],[11,"append_replace","","",3,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"list","","",3,[[["self"],["str"],["str"]],["result",["vec"]]]],[11,"list_table","","",3,[[["self"],["str"]],["result",["vec"]]]],[11,"list_chains","","",3,[[["self"],["str"]],["result",["vec"]]]],[11,"new_chain","","",3,[[["self"],["str"],["str"]],["result",["bool"]]]],[11,"commit","","",3,[[["self"]],["result",["bool"]]]],[11,"insert","","METHOD UNSUPPORTED IN `IPTablesRestore`!",3,[[["self"],["str"],["str"],["str"],["i32"]],["result",["bool"]]]],[11,"insert_unique","","METHOD UNSUPPORTED IN `IPTablesRestore`!",3,[[["self"],["str"],["str"],["str"],["i32"]],["result",["bool"]]]],[11,"append_unique","","METHOD UNSUPPORTED IN `IPTablesRestore`!",3,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"get_policy","","METHOD UNSUPPORTED IN `IPTablesRestore`!",3,[[["self"],["str"],["str"]],["result",["string"]]]],[11,"exists","","METHOD UNSUPPORTED IN `IPTablesRestore`!",3,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"chain_exists","","METHOD UNSUPPORTED IN `IPTablesRestore`!",3,[[["self"],["str"],["str"]],["result",["bool"]]]],[11,"replace","","METHOD UNSUPPORTED IN `IPTablesRestore`!",3,[[["self"],["str"],["str"],["str"],["i32"]],["result",["bool"]]]],[11,"delete_all","","METHOD UNSUPPORTED IN `IPTablesRestore`!",3,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"rename_chain","","METHOD UNSUPPORTED IN `IPTablesRestore`!",3,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"delete_chain","","METHOD UNSUPPORTED IN `IPTablesRestore`!",3,[[["self"],["str"],["str"]],["result",["bool"]]]],[11,"get_policy","","",4,[[["self"],["str"],["str"]],["result",["string"]]]],[11,"set_policy","","",4,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"exists","","",4,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"chain_exists","","",4,[[["self"],["str"],["str"]],["result",["bool"]]]],[11,"insert","","",4,[[["self"],["str"],["str"],["str"],["i32"]],["result",["bool"]]]],[11,"insert_unique","","",4,[[["self"],["str"],["str"],["str"],["i32"]],["result",["bool"]]]],[11,"replace","","",4,[[["self"],["str"],["str"],["str"],["i32"]],["result",["bool"]]]],[11,"append","","",4,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"append_unique","","",4,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"append_replace","","",4,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"delete","","",4,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"delete_all","","",4,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"list","","",4,[[["self"],["str"],["str"]],["result",["vec"]]]],[11,"list_table","","",4,[[["self"],["str"]],["result",["vec"]]]],[11,"list_chains","","",4,[[["self"],["str"]],["result",["vec"]]]],[11,"new_chain","","",4,[[["self"],["str"],["str"]],["result",["bool"]]]],[11,"flush_chain","","",4,[[["self"],["str"],["str"]],["result",["bool"]]]],[11,"rename_chain","","",4,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"delete_chain","","",4,[[["self"],["str"],["str"]],["result",["bool"]]]],[11,"flush_table","","",4,[[["self"],["str"]],["result",["bool"]]]],[11,"commit","","",4,[[["self"]],["result",["bool"]]]],[11,"execute","","",4,[[["self"],["str"],["str"]],["result",["output"]]]],[11,"default","","",5,[[],["iptableslogger"]]],[11,"new","","Create a new instance of `IPTablesLogger`",5,[[],["iptableslogger"]]],[11,"logs","","Get the collected logs.",5,[[["self"]],["vec"]]],[11,"get_policy","","",5,[[["self"],["str"],["str"]],["result",["string"]]]],[11,"set_policy","","",5,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"exists","","",5,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"chain_exists","","",5,[[["self"],["str"],["str"]],["result",["bool"]]]],[11,"insert","","",5,[[["self"],["str"],["str"],["str"],["i32"]],["result",["bool"]]]],[11,"insert_unique","","",5,[[["self"],["str"],["str"],["str"],["i32"]],["result",["bool"]]]],[11,"replace","","",5,[[["self"],["str"],["str"],["str"],["i32"]],["result",["bool"]]]],[11,"append","","",5,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"append_unique","","",5,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"append_replace","","",5,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"delete","","",5,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"delete_all","","",5,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"list","","",5,[[["self"],["str"],["str"]],["result",["vec"]]]],[11,"list_table","","",5,[[["self"],["str"]],["result",["vec"]]]],[11,"list_chains","","",5,[[["self"],["str"]],["result",["vec"]]]],[11,"new_chain","","",5,[[["self"],["str"],["str"]],["result",["bool"]]]],[11,"flush_chain","","",5,[[["self"],["str"],["str"]],["result",["bool"]]]],[11,"rename_chain","","",5,[[["self"],["str"],["str"],["str"]],["result",["bool"]]]],[11,"delete_chain","","",5,[[["self"],["str"],["str"]],["result",["bool"]]]],[11,"flush_table","","",5,[[["self"],["str"]],["result",["bool"]]]],[11,"commit","","",5,[[["self"]],["result",["bool"]]]],[11,"execute","","",5,[[["self"],["str"],["str"]],["result",["output"]]]],[0,"process","dfw","This module holds the types related to configuration processing and rule creation.",N,N],[3,"ProcessDFW","dfw::process","Enclosing struct to manage rule processing.",N,N],[3,"ProcessingOptions","","Options to configure the processing procedure.",N,N],[12,"container_filter","","Option to filter the containers to be processed, see `ContainerFilter`.",6,N],[4,"ContainerFilter","","Option to filter the containers to be processed",N,N],[13,"All","","Process all containers, i.e. don't filter.",7,N],[13,"Running","","Only process running containers.",7,N],[11,"new","","Create a new instance of `ProcessDFW` for rule processing.",8,[[["docker"],["dfw"],["iptables"],["iptables"],["processingoptions"],["logger"]],["result",["processdfw"]]]],[11,"process","","Start the processing using the configuration given at creation.",8,[[["self"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["containerfilter"]]],[11,"eq","","",7,[[["self"],["containerfilter"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["processingoptions"]]],[11,"eq","","",6,[[["self"],["processingoptions"]],["bool"]]],[11,"ne","","",6,[[["self"],["processingoptions"]],["bool"]]],[11,"default","","",6,[[],["self"]]],[0,"types","dfw","The types in this module make up the structure of the configuration-file(s).",N,N],[3,"DFW","dfw::types","`DFW` is the parent type defining the complete configuration used by DFW to build up the firewall rules.",N,N],[12,"defaults","","The `defaults` configuration section",9,N],[12,"initialization","","The `initialization` configuration section",9,N],[12,"container_to_container","","The `container_to_container` configuration section",9,N],[12,"container_to_wider_world","","The `container_to_wider_world` configuration section",9,N],[12,"container_to_host","","The `container_to_host` configuration section",9,N],[12,"wider_world_to_container","","The `wider_world_to_container` configuration section",9,N],[12,"container_dnat","","The `container_dnat` configuration section",9,N],[3,"Defaults","","The default configuration section, used by DFW for rule processing.",N,N],[12,"external_network_interfaces","","This defines the external network interfaces of the host to consider during building the rules. The value can be non-existant, a string, or a sequence of strings.",10,N],[3,"Initialization","","The initialization section allows you to add custom rules to any table in both iptables and ip6tables.",N,N],[12,"v4","","Initialization rules for iptables (IPv4). Expects a map where the key is a specific table and the value is a list of rules.",11,N],[12,"v6","","Initialization rules for ip6tables (IPv6). Expects a map where the key is a specific table and the value is a list of rules.",11,N],[3,"ContainerToContainer","","The container-to-container section, defining how containers can communicate amongst each other.",N,N],[12,"default_policy","","The `default_policy` defines the default for when there is not a specific rule.",12,N],[12,"rules","","An optional list of rules, see `ContainerToContainerRule`.",12,N],[3,"ContainerToContainerRule","","Definition for a rule to be used in the container-to-container section.",N,N],[12,"network","","Common network between the source container and the destination container to apply the rule to.",13,N],[12,"src_container","","Source container to apply the rule to.",13,N],[12,"dst_container","","Destination container to apply the rule to.",13,N],[12,"filter","","Additional filter, which will be added to the iptables command.",13,N],[12,"action","","Action to take (i.e. `ACCEPT`, `DROP`, `REFUSE`).",13,N],[3,"ContainerToWiderWorld","","The container-to-wider-world section, defining how containers can communicate with the wider world.",N,N],[12,"default_policy","","The `default_policy` defines the default for when there is not a specific rule.",14,N],[12,"rules","","An optional list of rules, see `ContainerToWiderWorldRule`.",14,N],[3,"ContainerToWiderWorldRule","","Definition for a rule to be used in the container-to-wider-world section.",N,N],[12,"network","","Network of the source container to apply the rule to.",15,N],[12,"src_container","","Source container to apply the rule to.",15,N],[12,"filter","","Additional filter, which will be added to the iptables command.",15,N],[12,"action","","Action to take (i.e. `ACCEPT`, `DROP`, `REFUSE`).",15,N],[12,"external_network_interface","","Specific external network interface to target.",15,N],[3,"ContainerToHost","","The container-to-host section, defining how containers can communicate with the host.",N,N],[12,"default_policy","","The `default_policy` defines the default for when there is not a specific rule.",16,N],[12,"rules","","An optional list of rules, see `ContainerToHostRule`.",16,N],[3,"ContainerToHostRule","","Definition for a rule to be used in the container-to-host section.",N,N],[12,"network","","Network of the source container to apply the rule to.",17,N],[12,"src_container","","Source container to apply the rule to.",17,N],[12,"filter","","Additional filter, which will be added to the iptables command.",17,N],[12,"action","","Action to take (i.e. `ACCEPT`, `DROP`, `REFUSE`).",17,N],[3,"WiderWorldToContainer","","The wider-world-to-container section, defining how containers can reached from the wider world.",N,N],[12,"rules","","An optional list of rules, see `WiderWorldToContainerRule`.",18,N],[3,"WiderWorldToContainerRule","","Definition for a rule to be used in the wider-world-to-container section.",N,N],[12,"network","","Network of the destination container to apply the rule to.",19,N],[12,"dst_container","","Destination container to apply the rule to.",19,N],[12,"expose_port","","Ports to apply the rule to.",19,N],[12,"external_network_interface","","Specific external network interface to target.",19,N],[3,"ExposePort","","Struct to hold a port definition to expose on the host/between containers.",N,N],[12,"host_port","","Port the `container_port` should be exposed to on the host.",20,N],[12,"container_port","","Port the `host_port` should map to into the container.",20,N],[12,"family","","Family of the exposed port.",20,N],[3,"ExposePortBuilder","","Builder for `ExposePort`.",N,N],[12,"host_port","","Port the `container_port` should be exposed to on the host.",21,N],[12,"container_port","","Port the `host_port` should map to into the container.",21,N],[12,"family","","Family of the exposed port.",21,N],[3,"ContainerDNAT","","The container-DNAT section, defining how containers can communicate with each other over non-common networks.",N,N],[12,"rules","","An optional list of rules, see `ContainerDNATRule`.",22,N],[3,"ContainerDNATRule","","Definition for a rule to be used in the container-DNAT section.",N,N],[12,"src_network","","Network of the source container to apply the rule to.",23,N],[12,"src_container","","Source container to apply the rule to.",23,N],[12,"dst_network","","Network of the destination container to apply the rule to.",23,N],[12,"dst_container","","Destination container to apply the rule to.",23,N],[12,"expose_port","","Ports to apply the rule to.",23,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["dfw"]]],[11,"eq","","",9,[[["self"],["dfw"]],["bool"]]],[11,"ne","","",9,[[["self"],["dfw"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["defaults"]]],[11,"eq","","",10,[[["self"],["defaults"]],["bool"]]],[11,"ne","","",10,[[["self"],["defaults"]],["bool"]]],[11,"hash","","",10,N],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["initialization"]]],[11,"eq","","",11,[[["self"],["initialization"]],["bool"]]],[11,"ne","","",11,[[["self"],["initialization"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["containertocontainer"]]],[11,"eq","","",12,[[["self"],["containertocontainer"]],["bool"]]],[11,"ne","","",12,[[["self"],["containertocontainer"]],["bool"]]],[11,"hash","","",12,N],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["containertocontainerrule"]]],[11,"eq","","",13,[[["self"],["containertocontainerrule"]],["bool"]]],[11,"ne","","",13,[[["self"],["containertocontainerrule"]],["bool"]]],[11,"hash","","",13,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["containertowiderworld"]]],[11,"eq","","",14,[[["self"],["containertowiderworld"]],["bool"]]],[11,"ne","","",14,[[["self"],["containertowiderworld"]],["bool"]]],[11,"hash","","",14,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["containertowiderworldrule"]]],[11,"eq","","",15,[[["self"],["containertowiderworldrule"]],["bool"]]],[11,"ne","","",15,[[["self"],["containertowiderworldrule"]],["bool"]]],[11,"hash","","",15,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["containertohost"]]],[11,"eq","","",16,[[["self"],["containertohost"]],["bool"]]],[11,"ne","","",16,[[["self"],["containertohost"]],["bool"]]],[11,"hash","","",16,N],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["containertohostrule"]]],[11,"eq","","",17,[[["self"],["containertohostrule"]],["bool"]]],[11,"ne","","",17,[[["self"],["containertohostrule"]],["bool"]]],[11,"hash","","",17,N],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["widerworldtocontainer"]]],[11,"eq","","",18,[[["self"],["widerworldtocontainer"]],["bool"]]],[11,"ne","","",18,[[["self"],["widerworldtocontainer"]],["bool"]]],[11,"hash","","",18,N],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["widerworldtocontainerrule"]]],[11,"eq","","",19,[[["self"],["widerworldtocontainerrule"]],["bool"]]],[11,"ne","","",19,[[["self"],["widerworldtocontainerrule"]],["bool"]]],[11,"hash","","",19,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["exposeport"]]],[11,"default","","",20,[[],["exposeport"]]],[11,"default","","",21,[[],["exposeportbuilder"]]],[11,"clone","","",21,[[["self"]],["exposeportbuilder"]]],[11,"host_port","","Port the `container_port` should be exposed to on the host.",21,[[["self"],["u16"]],["self"]]],[11,"container_port","","Port the `host_port` should map to into the container.",21,[[["self"],["option",["u16"]]],["self"]]],[11,"family","","Family of the exposed port.",21,[[["self"],["string"]],["self"]]],[11,"build","","Builds a new `ExposePort`.",21,[[["self"]],["result",["exposeport","string"]]]],[11,"eq","","",20,[[["self"],["exposeport"]],["bool"]]],[11,"ne","","",20,[[["self"],["exposeport"]],["bool"]]],[11,"hash","","",20,N],[11,"from_str","","Convert a formatted string into a `ExposePort`.",20,[[["str"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["containerdnat"]]],[11,"eq","","",22,[[["self"],["containerdnat"]],["bool"]]],[11,"ne","","",22,[[["self"],["containerdnat"]],["bool"]]],[11,"hash","","",22,N],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["containerdnatrule"]]],[11,"eq","","",23,[[["self"],["containerdnatrule"]],["bool"]]],[11,"ne","","",23,[[["self"],["containerdnatrule"]],["bool"]]],[11,"hash","","",23,N],[0,"util","dfw","Utilities module",N,N],[5,"load_file","dfw::util","Load single TOML-file from path and deserialize it into type `T`.",N,[[["str"]],["result"]]],[5,"load_path","","Load all TOML-files from a path, concatenate their contents and deserialize the result into type `T`.",N,[[["str"]],["result"]]],[11,"from","dfw::errors","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","dfw::iptables","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","dfw::process","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","dfw::types","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]]],"paths":[[4,"DFWError"],[4,"IPVersion"],[8,"IPTables"],[3,"IPTablesRestore"],[3,"IPTablesDummy"],[3,"IPTablesLogger"],[3,"ProcessingOptions"],[4,"ContainerFilter"],[3,"ProcessDFW"],[3,"DFW"],[3,"Defaults"],[3,"Initialization"],[3,"ContainerToContainer"],[3,"ContainerToContainerRule"],[3,"ContainerToWiderWorld"],[3,"ContainerToWiderWorldRule"],[3,"ContainerToHost"],[3,"ContainerToHostRule"],[3,"WiderWorldToContainer"],[3,"WiderWorldToContainerRule"],[3,"ExposePort"],[3,"ExposePortBuilder"],[3,"ContainerDNAT"],[3,"ContainerDNATRule"]]};
initSearch(searchIndex);
